Index: Core/mainCore.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Core/mainCore.py b/Core/mainCore.py
--- a/Core/mainCore.py	(revision 8755a23baad41ad7568093eb37651c7ede0d485d)
+++ b/Core/mainCore.py	(date 1729892905965)
@@ -1,0 +1,207 @@
+import os
+import numpy as np
+import pandas as pd
+from PyQt5 import QtWidgets
+import matplotlib.pyplot as plt
+from scipy.interpolate import interp1d
+
+class SignalProcessor:
+    def reading_signal(self, filePath):
+        """Return a dataframe from a read file format."""
+        try:
+            print(f"Reading signal from file: {filePath}")  # Debugging line
+            self.signal = pd.read_csv(filePath, header=None)  # Read without headers
+
+            # Convert the data to numeric, forcing errors to NaN
+            self.signal[0] = pd.to_numeric(self.signal[0], errors='coerce')
+            self.signal[1] = pd.to_numeric(self.signal[1], errors='coerce')
+
+            # Drop any rows with NaN values
+            self.signal.dropna(inplace=True)
+
+            print("Signal data read successfully.")  # Debugging line
+            return self.signal
+        except Exception as e:
+            print(f"Error in reading_signal: {str(e)}")  # Debugging line
+            raise ValueError(f"An error occurred while reading the file: {str(e)}")
+
+    def sample_signal(self, signal, sampleRate):
+        """Sample the signal based on the given sample rate."""
+        try:
+            print(f"Sampling signal with sample rate: {sampleRate}")  # Debugging line
+            t = signal.iloc[:, 0].values
+            y = signal.iloc[:, 1].values
+            sampleRate = int(sampleRate * 10)
+
+            step = len(t) // sampleRate
+            timeArray = []
+            amplitudeArray = []
+
+            for i in range(0, len(t), step):
+                timeArray.append(t[i])
+                amplitudeArray.append(y[i])
+
+            # Ensure the last time point is included
+            timeArray.append(t[-1])
+            amplitudeArray.append(y[-1] if len(y) > 0 else 0)
+
+            print(f"Sampled {len(timeArray)} points.")  # Debugging line
+            d = {'t': timeArray, 'y': amplitudeArray}
+            return pd.DataFrame(data=d)
+        except Exception as e:
+            print(f"Error in sample_signal: {str(e)}")  # Debugging line
+            raise ValueError(f"Can't sample the function: {str(e)}")
+
+    def reconstruct_signal(self, sampledSignal):
+        """Reconstruct the signal from the sampled signal."""
+        try:
+            print("Reconstructing signal...")  # Debugging line
+            time = sampledSignal['t'].values
+            amplitude = sampledSignal['y'].values
+
+            # Linear interpolation for signal reconstruction
+            t_reconstruct = np.linspace(time[0], time[-1], 1000)
+            amplitude_reconstruction = self.reconstruct_helper(t_reconstruct, time, amplitude)
+
+            reconstructedData = {'time': t_reconstruct, 'amplitude': amplitude_reconstruction}
+            print(f"Reconstructed signal with {len(reconstructedData['time'])} points.")  # Debugging line
+            return pd.DataFrame(reconstructedData)
+        except Exception as e:
+            print(f"Error in reconstruct_signal: {str(e)}")  # Debugging line
+            raise ValueError(f"Can't reconstruct this signal: {str(e)}")
+
+    def reconstruct_helper(self, t, tSampled, ySampled):
+        """A helper function for reconstructing the signal using interpolation."""
+        try:
+            print("Performing interpolation...")  # Debugging line
+            interpolator = interp1d(tSampled, ySampled, kind='linear', fill_value="extrapolate")
+            reconstructed = interpolator(t)
+            print("Interpolation successful.")  # Debugging line
+            return reconstructed
+        except Exception as e:
+            print(f"Error in reconstruct_helper: {str(e)}")  # Debugging line
+            raise ValueError(f"Error during interpolation: {str(e)}")
+
+
+class SignalApp(QtWidgets.QWidget):
+    def __init__(self):
+        super().__init__()
+        self.processor = SignalProcessor()
+        self.setWindowTitle("Signal Sampling and Recovery")
+        self.setGeometry(100, 100, 400, 300)
+
+        # Layout
+        self.layout = QtWidgets.QVBoxLayout()
+        self.setLayout(self.layout)
+
+        # File Path Input
+        self.file_path_input = QtWidgets.QLineEdit()
+        self.file_path_input.setPlaceholderText("Enter the path of the CSV file")
+        self.layout.addWidget(self.file_path_input)
+
+        # Batch Start Input
+        self.batch_start_input = QtWidgets.QSpinBox()
+        self.batch_start_input.setRange(0, 100000)
+        self.batch_start_input.setValue(0)
+        self.layout.addWidget(self.batch_start_input)
+
+        # Load Button
+        self.load_button = QtWidgets.QPushButton("Load Signal")
+        self.load_button.clicked.connect(self.load_signal)
+        self.layout.addWidget(self.load_button)
+
+        # Sampling Frequency Input
+        self.sampling_freq_input = QtWidgets.QDoubleSpinBox()
+        self.sampling_freq_input.setRange(0.1, 4.0)
+        self.sampling_freq_input.setSingleStep(0.1)
+        self.sampling_freq_input.setDecimals(1)
+        self.sampling_freq_input.setValue(1.0)
+        self.layout.addWidget(self.sampling_freq_input)
+
+        # Sample Button
+        self.sample_button = QtWidgets.QPushButton("Sample Signal")
+        self.sample_button.clicked.connect(self.sample_signal)
+        self.layout.addWidget(self.sample_button)
+
+        # Reconstruct Button
+        self.reconstruct_button = QtWidgets.QPushButton("Reconstruct Signal")
+        self.reconstruct_button.clicked.connect(self.reconstruct_signal)
+        self.layout.addWidget(self.reconstruct_button)
+
+        self.signal = None
+        self.sampled_signal = None
+
+    def load_signal(self):
+        file_path = self.file_path_input.text().strip()
+        start_idx = self.batch_start_input.value()
+
+        if file_path:
+            try:
+                signal_data = self.processor.reading_signal(file_path)
+                # Select a batch of 50 points
+                self.signal = signal_data.iloc[start_idx:start_idx + 50]
+                print(f"Loaded signal data: {self.signal}")  # Debugging line
+                self.plot_data()  # Plot the loaded signal
+            except ValueError as e:
+                print(f"Error in load_signal: {str(e)}")  # Debugging line
+                QtWidgets.QMessageBox.critical(self, "Error", str(e))
+
+    def sample_signal(self):
+        if self.signal is None:
+            print("No signal loaded to sample.")  # Debugging line
+            return
+
+        fs = self.sampling_freq_input.value()  # Get sampling frequency
+        self.sampled_signal = self.processor.sample_signal(self.signal, fs)
+        print(f"Sampled signal data: {self.sampled_signal}")  # Debugging line
+        self.plot_data()  # Plot the sampled signal
+
+    def reconstruct_signal(self):
+        if self.sampled_signal is None:
+            print("No sampled signal to reconstruct.")  # Debugging line
+            return
+
+        reconstructed_signal = self.processor.reconstruct_signal(self.sampled_signal)
+        print(f"Reconstructed signal data: {reconstructed_signal}")  # Debugging line
+        self.plot_data(reconstructed_signal)  # Plot the reconstructed signal
+
+    def plot_data(self, reconstructed_signal=None):
+        plt.figure(figsize=(12, 8))
+        plt.suptitle("Signal Analysis", fontsize=16)
+
+        # Original Signal Plot
+        plt.subplot(311)
+        plt.plot(self.signal.iloc[:, 0], self.signal.iloc[:, 1], label="Original Signal", color='blue')
+        plt.title("Original Signal")
+        plt.xlabel("Time (s)")
+        plt.ylabel("Amplitude")
+        plt.legend()
+
+        # Sampled Signal Plot
+        plt.subplot(312)
+        if self.sampled_signal is not None:
+            plt.plot(self.sampled_signal['t'], self.sampled_signal['y'], 'o-', label="Sampled Signal", color='red')
+        plt.title("Sampled Signal")
+        plt.xlabel("Time (s)")
+        plt.ylabel("Amplitude")
+        plt.legend()
+
+        # Reconstructed Signal Plot
+        plt.subplot(313)
+        if reconstructed_signal is not None:
+            plt.plot(reconstructed_signal['time'], reconstructed_signal['amplitude'], label="Reconstructed Signal", color='green')
+        plt.title("Reconstructed Signal")
+        plt.xlabel("Time (s)")
+        plt.ylabel("Amplitude")
+        plt.legend()
+
+        # Display the plots in the IDE
+        plt.tight_layout()
+        plt.show()
+
+
+if __name__ == "__main__":
+    app = QtWidgets.QApplication([])
+    mainWin = SignalApp()
+    mainWin.show()
+    app.exec_()
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"cf936afa-7aac-4859-a24f-60ffba97b4aa\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/Signal-Reconstructor.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/Signal-Reconstructor.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/GUI/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/GUI/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2nvZIqT76889PWggeLxJcsqbufU\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"last_opened_file_path\": \"D:/Faculty/SBE 24-25/DSP/Signal-Viewer-Team18\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"cf936afa-7aac-4859-a24f-60ffba97b4aa\" name=\"Changes\" comment=\"\" />\r\n      <created>1729855432731</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1729855432731</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 8755a23baad41ad7568093eb37651c7ede0d485d)
+++ b/.idea/workspace.xml	(date 1730061133530)
@@ -8,7 +8,7 @@
       <change beforePath="$PROJECT_DIR$/.idea/Signal-Reconstructor.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/Signal-Reconstructor.iml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/GUI/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/GUI/main.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Core/mainCore.py" beforeDir="false" afterPath="$PROJECT_DIR$/Core/mainCore.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -25,6 +25,18 @@
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;Meram-Mahmoud&quot;
+  }
+}</component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/TalalEmara/Signal-Reconstructor.git&quot;,
+    &quot;accountId&quot;: &quot;8bed304c-abb0-4097-a812-4dce8c1a20cd&quot;
+  }
+}</component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 2
 }</component>
@@ -33,15 +45,30 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "main",
-    "last_opened_file_path": "D:/Faculty/SBE 24-25/DSP/Signal-Viewer-Team18",
-    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable"
-  }
-}]]></component>
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.mainCore.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/Lenovo/Signal-Reconstructor&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  }
+}</component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-PY-242.23339.19" />
+        <option value="bundled-python-sdk-0029f7779945-399fe30bd8c1-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.23339.19" />
+      </set>
+    </attachedChunks>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -50,7 +77,15 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1729855432731</updated>
+      <workItem from="1729889981670" duration="3614000" />
+      <workItem from="1730056188815" duration="1408000" />
     </task>
     <servers />
   </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/Signal_Reconstructor$mainCore.coverage" NAME="mainCore Coverage Results" MODIFIED="1729892906112" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/Core" />
+  </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"Python 3.10 (Signal-Viewer-Team18)\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.11 (Signal-Reconstructor)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 8755a23baad41ad7568093eb37651c7ede0d485d)
+++ b/.idea/misc.xml	(date 1729890299091)
@@ -3,5 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="Python 3.10 (Signal-Viewer-Team18)" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11 (Signal-Reconstructor)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/Signal-Reconstructor.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/GUI/Evn\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.11 (Signal-Reconstructor)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Signal-Reconstructor.iml b/.idea/Signal-Reconstructor.iml
--- a/.idea/Signal-Reconstructor.iml	(revision 8755a23baad41ad7568093eb37651c7ede0d485d)
+++ b/.idea/Signal-Reconstructor.iml	(date 1729890299076)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/GUI/Evn" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.11 (Signal-Reconstructor)" jdkType="Python SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
