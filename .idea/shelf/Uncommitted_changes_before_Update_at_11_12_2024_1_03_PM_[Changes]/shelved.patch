Index: GUI/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport sys\r\n\r\nimport numpy as np\r\nfrom PyQt5.QtCore import Qt, pyqtSignal\r\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QHBoxLayout, QSplitter, QCheckBox, QDoubleSpinBox, QSlider, QLabel\r\nfrom pyqtgraph import PlotWidget, mkPen\r\n\r\nsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\r\nfrom toolbar import ToolBar\r\nfrom Composer import Composer\r\nfrom Core.Data_load import DataLoader\r\nfrom Core.mixer import mixer, remove_elements\r\nfrom Core.noise import add_noise\r\nfrom Core.mainCore import sample_and_reconstruct, sinc_interp, linear_interp, calculate_max_frequency, \\\r\n    zoh_reconstruction, cubic_spline_interp, calculate_difference\r\n\r\nfrom Styles.ToolBarStyling import toolBarStyle, buttonStyle, buttonWhiteStyle, comboBoxStyle, sliderOnStyle,sliderOffStyle, TitleStyle, labelOffStyle,labelOnStyle, numberInputOffStyle,numberInputOnStyle\r\n\r\n\r\nclass MainApp(QMainWindow):\r\n\r\n    snrEnabledChanged = pyqtSignal(bool)\r\n    snrChanged = pyqtSignal(float)\r\n    samplingRateChanged = pyqtSignal(float)\r\n\r\n    def __init__(self, csv_file_path):\r\n        super().__init__()\r\n\r\n        self.old_amplitude = None\r\n        self.old_frequency = None\r\n        self.old_type = None\r\n\r\n        self.interp_methods = {\r\n            \"Whittaker-Shannon (sinc)\": sinc_interp,\r\n            \"Linear\": linear_interp,\r\n            \"Zero-Order Hold\": zoh_reconstruction,\r\n            \"Cubic-Spline\": cubic_spline_interp\r\n        }\r\n        self.interp_method = self.interp_methods[\"Whittaker-Shannon (sinc)\"]\r\n\r\n        # self.data_loader = DataLoader(csv_file_path)\r\n        # self.signalData = self.data_loader.get_data()\r\n        self.signalData=self.generate_default_data()\r\n        self.signalfMax = calculate_max_frequency(self.signalData[:, 1], self.signalData[:, 0])\r\n        print(f\"max frequency: {self.signalfMax}\")\r\n\r\n        self.sampling_rate = 5\r\n\r\n        self.mixedSignalData = None\r\n        self.reconstructedSignalData = self.signalData\r\n\r\n        self.setWindowTitle(\"Signal\")\r\n        self.setWindowState(Qt.WindowMaximized)\r\n        self.setStyleSheet(\"background-color: #f0f1f5;\")\r\n\r\n        self.controlBar = ToolBar()\r\n        self.controlBar.signalfMax = self.signalfMax\r\n\r\n        self.snr_enabled = False\r\n        # self.controlBar.setStyleSheet(\"background:red;\")\r\n        self.controlBar.dataLoaded.connect(self.updateSignalData)\r\n        self.controlBar.dataLoaded.connect(lambda data: self.updateSignalData(data.to_numpy()))\r\n\r\n        self.snrEnabledChanged.connect(self.set_snr_enabled)\r\n        self.snrChanged.connect(self.updateNoise)\r\n        self.samplingRateChanged.connect(self.updateSamplingRate)\r\n        self.controlBar.methodChanged.connect(self.updateSamplingMethod)\r\n        self.controlBar.clearButton.clicked.connect(self.clearAll)\r\n\r\n        #self.controlBar.samplingRateInput.setValue(self.sampling_rate)\r\n        \r\n\r\n        self.current_signal_index = None\r\n\r\n        self.composer = Composer()\r\n        self.composer.valueAdded.connect(self.add_mixed_signal)\r\n        self.composer.valueUpdated.connect(self.update_table_mixed_signal)\r\n        self.composer.valueRemoved.connect(self.remove_element)\r\n\r\n\r\n        self.snrEnable = QCheckBox(\"SNR: \")\r\n        self.snrEnable.setStyleSheet(labelOffStyle)\r\n        self.snrSlider = QSlider(Qt.Horizontal)\r\n        self.snrSlider.setStyleSheet(sliderOffStyle)\r\n        self.snrInput = QDoubleSpinBox()\r\n        self.snrInput.setButtonSymbols(QDoubleSpinBox.NoButtons)\r\n        self.snrInput.setAlignment(Qt.AlignCenter)\r\n        self.snrInput.setStyleSheet(numberInputOffStyle)\r\n\r\n        self.snrSlider.setRange(1, 30)\r\n\r\n        self.snrInput.setRange(1, 30)\r\n        self.snrSlider.setValue(30)\r\n        self.snrInput.setDecimals(2)\r\n        self.snrInput.setValue(30)\r\n        self.snrInput.setAlignment(Qt.AlignCenter)\r\n\r\n        self.snrSlider.setEnabled(False)\r\n        self.snrInput.setEnabled(False)\r\n\r\n        self.snrSlider.valueChanged.connect(lambda value: self.snrInput.setValue(value / 1.0))  # Convert to float\r\n        self.snrInput.valueChanged.connect(lambda value: self.snrSlider.setValue(int(value)))\r\n        self.snrSlider.valueChanged.connect(self.on_snr_changed)\r\n        self.snrEnable.stateChanged.connect(self.on_snr_enabled_changed)\r\n\r\n        self.samplingSlider = QSlider(Qt.Horizontal)\r\n        self.samplingSlider.setValue(int(200/self.signalfMax))\r\n        self.samplingSlider.setRange(int(200/self.signalfMax), 400)\r\n        self.samplingSlider.setSingleStep(1)\r\n        self.samplingSlider.setStyleSheet(sliderOnStyle)\r\n\r\n        self.samplingRateLabel = QLabel(\"Sampling Rate: \")\r\n        self.samplingRateInput = QDoubleSpinBox()\r\n        self.samplingRateInput.setRange(0, float('inf'))\r\n        self.samplingRateInput.setButtonSymbols(QDoubleSpinBox.NoButtons)\r\n        self.samplingRateInput.setAlignment(Qt.AlignCenter)\r\n        self.samplingRateInput.setStyleSheet(numberInputOnStyle)\r\n        self.samplingRateInput.setSuffix(\"Hz\")\r\n        self.samplingRateInput.setValue(self.sampling_rate)\r\n\r\n        self.normSamplingRateInput = QDoubleSpinBox()\r\n        self.normSamplingRateInput.setButtonSymbols(QDoubleSpinBox.NoButtons)\r\n        self.normSamplingRateInput.setAlignment(Qt.AlignCenter)\r\n        self.normSamplingRateInput.setStyleSheet(numberInputOnStyle)\r\n        self.normSamplingRateInput.setSuffix(\" fmax\")\r\n        self.normSamplingRateInput.setRange(0,4)\r\n\r\n        self.samplingSlider.valueChanged.connect(lambda value: self.normSamplingRateInput.setValue(value / 100.0))\r\n        self.normSamplingRateInput.valueChanged.connect(lambda value: self.samplingSlider.setValue(int(value * 100)))\r\n        self.normSamplingRateInput.valueChanged.connect(lambda: self.samplingRateInput.setValue(self.signalfMax * self.normSamplingRateInput.value()))\r\n        self.samplingRateInput.valueChanged.connect(lambda value: self.samplingSlider.setValue(int(value / self.signalfMax * 100)) if self.signalfMax else None)\r\n        self.samplingRateInput.valueChanged.connect(self.on_sampling_rate_changed)\r\n\r\n\r\n        self.controlBar.dataLoaded.connect(self.composer.clear_table)\r\n        # self.composer.setStyleSheet(\"background:blue;\")\r\n\r\n        self.originalSignal = PlotWidget()\r\n        self.originalSignal.setLabel('left', 'Amplitude')\r\n        self.originalSignal.setLabel('bottom', 'Time', units='s')\r\n        self.originalSignal.addLegend()\r\n\r\n        self.noisySignal = PlotWidget()\r\n\r\n        self.reconstructedSignal = PlotWidget()\r\n        self.reconstructedSignal.addLegend()\r\n        # self.reconstructedSignal.setStyleSheet(\"background:purple;\")\r\n\r\n        self.diffrenceGraph = PlotWidget()\r\n        self.diffrenceGraph.addLegend()\r\n        # self.diffrenceGraph.setStyleSheet(\"background:light blue;\")\r\n\r\n        self.frequencyDomain = PlotWidget()\r\n        self.frequencyDomain.addLegend()\r\n        # self.frequencyDomain.setStyleSheet(\"background:dark grey;\")\r\n\r\n        self.mainLayout = QHBoxLayout()\r\n        self.controlBarLayout = QHBoxLayout()\r\n        self.workspace = QHBoxLayout()\r\n        self.graphsLayout = QVBoxLayout()\r\n        self.workspace = QVBoxLayout()\r\n        self.composerLayout = QVBoxLayout()\r\n        self.graphsLayout = QVBoxLayout()\r\n        self.originalSignalLayout = QHBoxLayout()\r\n        self.reconstructedSignalLayout = QHBoxLayout()\r\n        self.comparisonLayout = QHBoxLayout()\r\n        self.diffrenceGraphLayout = QVBoxLayout()\r\n        self.frequencyDomainLayout = QVBoxLayout()\r\n\r\n        # self.comparisonLayout.addLayout(self.diffrenceGraphLayout)\r\n        # self.comparisonLayout.addLayout(self.frequencyDomainLayout)\r\n\r\n        self.graphsLayout.addLayout(self.originalSignalLayout, 30)\r\n        self.graphsLayout.addLayout(self.reconstructedSignalLayout, 30)\r\n        self.graphsLayout.addLayout(self.comparisonLayout, 40)\r\n\r\n        self.workspace.addLayout(self.controlBarLayout, 5)\r\n        self.workspace.addLayout(self.graphsLayout, 95)\r\n\r\n        self.mainLayout.addLayout(self.workspace, 85)\r\n        self.mainLayout.addLayout(self.composerLayout, 15)\r\n\r\n        self.controlBarLayout.addWidget(self.controlBar)\r\n        #self.composerLayout.addWidget(self.composer)\r\n        # Adding the SNR and sampling sliders to the composerLayout\r\n\r\n        # horizontal layout for the 2 fields of sampling values\r\n        samplingRateInputLayout = QHBoxLayout()\r\n        samplingRateInputLayout.addWidget(self.samplingRateInput)    \r\n        #samplingRateInputLayout.addStretch(10)    \r\n        samplingRateInputLayout.addWidget(self.normSamplingRateInput)\r\n\r\n        self.samplingRateLabel.setStyleSheet(labelOnStyle)\r\n\r\n        #self.composerLayout.addSpacing(10)\r\n        self.composerLayout.addWidget(self.samplingRateLabel)\r\n        self.composerLayout.addSpacing(10)\r\n        self.composerLayout.addWidget(self.samplingSlider)\r\n        self.composerLayout.addSpacing(10)\r\n        self.composerLayout.addLayout(samplingRateInputLayout)\r\n        self.composerLayout.addSpacing(20)\r\n\r\n        self.composerLayout.addWidget(self.snrEnable)\r\n        self.composerLayout.addSpacing(10)\r\n        self.composerLayout.addWidget(self.snrSlider)\r\n        self.composerLayout.addSpacing(10)\r\n        self.composerLayout.addWidget(self.snrInput)\r\n        self.composerLayout.addSpacing(20)\r\n        self.composerLayout.addWidget(self.composer)\r\n\r\n        self.originalSignalLayout.addWidget(self.originalSignal)\r\n        self.reconstructedSignalLayout.addWidget(self.reconstructedSignal)\r\n        self.diffrenceGraphLayout.addWidget(self.diffrenceGraph)\r\n        self.frequencyDomainLayout.addWidget(self.frequencyDomain)\r\n\r\n        self.splitter = QSplitter(Qt.Vertical)\r\n        self.splitter.addWidget(self.diffrenceGraph)\r\n        self.splitter.addWidget(self.frequencyDomain)\r\n        self.comparisonLayout.addWidget(self.splitter)\r\n\r\n        mainWidget = QWidget()\r\n        mainWidget.setLayout(self.mainLayout)\r\n        self.setCentralWidget(mainWidget)\r\n\r\n        self.updateSignalData(self.signalData)\r\n\r\n        # limit x\r\n        self.originalSignal.sigXRangeChanged.connect(lambda: self.limit_x_axis(self.originalSignal))\r\n        self.reconstructedSignal.sigXRangeChanged.connect(lambda: self.limit_x_axis(self.reconstructedSignal))\r\n        self.diffrenceGraph.sigXRangeChanged.connect(lambda: self.limit_x_axis(self.diffrenceGraph))\r\n        # self.frequencyDomain.sigXRangeChanged.connect(lambda: self.limit_axis(self.frequencyDomain))\r\n\r\n        # link panning\r\n        self.originalSignal.sigXRangeChanged.connect(self.sync_pan)\r\n        self.reconstructedSignal.sigXRangeChanged.connect(self.sync_pan)\r\n        self.diffrenceGraph.sigXRangeChanged.connect(self.sync_pan)\r\n\r\n        self.is_panning = False\r\n\r\n    def on_sampling_rate_changed(self, value):\r\n        self.samplingRateChanged.emit(value)\r\n\r\n    def onMethodChanged(self, value):\r\n        self.methodChanged.emit(self.samplingMethod.currentText())\r\n\r\n    def on_snr_changed(self, value):\r\n        self.snrChanged.emit(value / 1.0)\r\n\r\n\r\n    def on_snr_enabled_changed(self, state):\r\n        is_enabled = state == Qt.Checked\r\n        self.snrEnabledChanged.emit(is_enabled)\r\n\r\n        self.snrSlider.setEnabled(is_enabled)\r\n        self.snrInput.setEnabled(is_enabled)\r\n\r\n        if is_enabled:\r\n            self.snrSlider.setStyleSheet(sliderOnStyle)\r\n            self.snrInput.setStyleSheet(numberInputOnStyle)\r\n            self.snrEnable.setStyleSheet(labelOnStyle)\r\n        else:\r\n            self.snrSlider.setStyleSheet(sliderOffStyle)\r\n            self.snrInput.setStyleSheet(numberInputOffStyle)\r\n            self.snrEnable.setStyleSheet(labelOffStyle)\r\n\r\n\r\n    def sync_pan(self, plot_widget):\r\n\r\n        if self.is_panning:\r\n            return\r\n\r\n        self.is_panning = True\r\n        time_min, time_max = plot_widget.viewRange()[0]\r\n\r\n\r\n        if plot_widget != self.originalSignal:\r\n            self.originalSignal.setXRange(time_min, time_max, padding=0)\r\n\r\n        if plot_widget != self.reconstructedSignal:\r\n            self.reconstructedSignal.setXRange(time_min, time_max, padding=0)\r\n\r\n        if plot_widget != self.diffrenceGraph:\r\n            self.diffrenceGraph.setXRange(time_min, time_max, padding=0)\r\n\r\n\r\n        self.is_panning = False\r\n\r\n    def limit_x_axis(self, plot_widget):\r\n        time_min, time_max = plot_widget.viewRange()[0]\r\n\r\n        if time_min < 0:\r\n            time_min = 0\r\n\r\n        time_end = self.signalData[-1, 0]\r\n\r\n        if time_max > time_end:\r\n            time_max = time_end\r\n\r\n        plot_widget.setXRange(time_min, time_max, padding=0)\r\n\r\n    def set_snr_enabled(self, enabled):\r\n        self.snr_enabled = enabled\r\n        self.updateSignalData(self.signalData)\r\n        self.updateNoise(self.snrSlider.value())\r\n\r\n    def updateNoise(self, snr_value):\r\n        if not self.snr_enabled:\r\n            return\r\n\r\n        time = self.signalData[:, 0]\r\n        amplitude = self.signalData[:, 1]\r\n\r\n        self.noisy_amplitude = add_noise(amplitude, snr_value)\r\n\r\n        self.sampledTime, self.sampledSignal, self.reconstructedSignalData = sample_and_reconstruct(\r\n            self.signalData[:, 0], self.noisy_amplitude, self.sampling_rate, self.interp_method)\r\n\r\n        noisy_signal_reconstructed = self.reconstructedSignalData\r\n\r\n        self.originalSignal.clear()\r\n\r\n        self.originalSignal.plot(time, self.noisy_amplitude, pen=mkPen(color=\"#a000c8\", width=2),\r\n                                 name=\"Original Signal With Noise\")\r\n        self.originalSignal.plot(self.sampledTime, self.sampledSignal, pen=None, symbol='o', symbolSize=5,\r\n                                 symbolBrush='w')\r\n        self.reconstructedSignal.clear()\r\n\r\n        self.reconstructedSignal.plot(time, noisy_signal_reconstructed, pen=mkPen(color=\"b\", width=2),\r\n                                      name=\"Reconstructed Signal\")\r\n        self.diffrenceGraph.clear()\r\n        noise_difference = calculate_difference(self.signalData[:, 1], noisy_signal_reconstructed)\r\n        meanError = np.mean(noise_difference)\r\n        self.diffrenceGraph.plot(time, noise_difference, pen=mkPen(color=\"r\", width=2),\r\n                                 name=f\"Difference graph with Error: {meanError:.4f}\")\r\n        time_step = time[1] - time[0]\r\n        self.frequencyDomain.clear()\r\n        self.plot_frequency_domain(self.noisy_amplitude, time_step)\r\n\r\n    def generate_default_data(self):  # testing\r\n        time = np.linspace(0, 20, 500)\r\n        amplitude = np.sin(2 * np.pi * 5 * time)\r\n        return np.column_stack((time, amplitude))\r\n\r\n    def updateSamplingRate(self, samplingRate):\r\n        self.sampling_rate = int(samplingRate)\r\n        print(samplingRate)\r\n        print(self.sampling_rate)\r\n        try:\r\n            self.updateSignalData(self.signalData)\r\n        except Exception as e:\r\n            print(f\"An error occurred while updating signal data: {e}\")\r\n\r\n    def updateSamplingMethod(self, method):\r\n        print(method)\r\n        self.interp_method = self.interp_methods[method]\r\n        print(self.interp_method)\r\n        self.updateSignalData(self.signalData)\r\n\r\n    def updateSignalData(self, data):\r\n        self.signalData = np.array(data)\r\n        snr_value = self.snrSlider.value()\r\n        self.signalfMax = calculate_max_frequency(self.signalData[:, 1], self.signalData[:, 0])\r\n\r\n        if self.signalData.shape[1] >= 2:\r\n            time = self.signalData[:, 0]\r\n            amplitude = self.signalData[:, 1]\r\n\r\n            # Only apply noise if snr_enabled is True and signal hasn't been noisy already\r\n            if self.snr_enabled and not hasattr(self, 'noisy_signal_applied'):\r\n                self.noisy_amplitude = add_noise(amplitude, snr_value)\r\n                self.noisy_signal_applied = True\r\n            elif not self.snr_enabled:\r\n                self.noisy_signal_applied = False\r\n                self.noisy_amplitude = amplitude\r\n            else:\r\n                # If snr_enabled is True but the signal has already been noisy, keep the noisy signal unchanged\r\n                self.noisy_amplitude = self.noisy_amplitude\r\n\r\n            self.sampledTime, self.sampledSignal, self.reconstructedSignalData = sample_and_reconstruct(\r\n                time, self.noisy_amplitude, self.sampling_rate, self.interp_method)\r\n            reconstructed_amplitude = self.reconstructedSignalData\r\n\r\n            self.originalSignal.clear()\r\n            self.reconstructedSignal.clear()\r\n\r\n            # Plot the noisy signal if snr_enabled\r\n            if self.snr_enabled:\r\n                self.originalSignal.plot(time, self.noisy_amplitude, pen=mkPen(color=\"#a000c8\", width=2),\r\n                                         name=\"Original Signal With Noise\")\r\n            else:\r\n                self.originalSignal.plot(time, amplitude, pen=mkPen(color=\"#a000c8\", width=2), name=\"Original Signal\")\r\n\r\n            self.originalSignal.plot(self.sampledTime, self.sampledSignal, pen=None, symbol='o', symbolSize=5,\r\n                                     symbolBrush='w')\r\n\r\n            self.reconstructedSignal.plot(time, reconstructed_amplitude, pen=mkPen(color=\"b\", width=2),\r\n                                          name=\"Reconstructed Signal\")\r\n\r\n            print(\"Signal Data Updated:\")\r\n            print(self.signalData)\r\n            self.diffrenceGraph.clear()\r\n            if self.signalData.shape[1] >= 2 and self.reconstructedSignalData.ndim == 1:\r\n                print(\"ttttt\")\r\n                print(self.signalData[:5, 1])\r\n                print(reconstructed_amplitude[:5])\r\n                difference = calculate_difference(self.signalData[:, 1], reconstructed_amplitude)\r\n                print(difference[:5])\r\n                meanError = np.mean(np.abs(difference))\r\n                self.diffrenceGraph.plot(self.signalData[:, 0], difference, pen=mkPen(color=\"r\", width=2),\r\n                                         name=f\"Difference graph with Error: {meanError:.4f}\")\r\n                self.diffrenceGraph.setYRange(-5, 5, padding=1)\r\n\r\n            self.plot_frequency_domain(self.noisy_amplitude, self.signalData[1, 0] - self.signalData[0, 0])\r\n\r\n        print(\"fmaxxxx\")\r\n        print(self.signalfMax)\r\n\r\n        self.controlBar.signalfMax = self.signalfMax\r\n\r\n    def calculate_difference(self, originalSignal, reconstructedSignalData):\r\n        length = max(len(originalSignal), len(reconstructedSignalData))\r\n        padded_originalSignal = np.pad(originalSignal, (0, length - len(originalSignal)), 'constant')\r\n        padded_reconstructedSignalData = np.pad(reconstructedSignalData, (0, length - len(reconstructedSignalData)),\r\n                                                'constant')\r\n        return padded_originalSignal - padded_reconstructedSignalData\r\n\r\n    def add_frequency_domain(self, reconstructedSignalData, time_difference):\r\n        reconstructedSignalData = np.array(reconstructedSignalData)\r\n\r\n        fft_result = np.fft.fft(reconstructedSignalData)\r\n\r\n        reconstructed_length = len(reconstructedSignalData)\r\n        frequencies = np.fft.fftfreq(reconstructed_length, d=time_difference)\r\n\r\n        magnitude = np.abs(fft_result)\r\n\r\n        if len(frequencies) != len(magnitude):\r\n            print(\"Length mismatch between frequencies and magnitudes!\")\r\n            return\r\n\r\n        self.frequencyDomain.plot(frequencies[:reconstructed_length // 2], magnitude[:reconstructed_length // 2],\r\n                                  pen=(255, 0, 0), width=2)\r\n\r\n        self.frequencyDomain.setXRange(0, np.max(frequencies[:reconstructed_length // 2]), padding=0)\r\n        self.frequencyDomain.setYRange(0, np.max(magnitude[:reconstructed_length // 2]), padding=0)\r\n\r\n    def plot_frequency_domain(self, original_amplitude, time_step):\r\n        reconstructed_length = len(original_amplitude)\r\n\r\n        original_fft_values = np.fft.fft(original_amplitude)\r\n        original_fft_frequencies = np.fft.fftfreq(reconstructed_length, d=time_step)\r\n        original_positive_frequencies = original_fft_frequencies[:reconstructed_length // 2]\r\n        original_magnitudes = np.abs(original_fft_values[:reconstructed_length // 2])\r\n\r\n        print(\"noo\")\r\n        print(len(self.reconstructedSignalData))\r\n        reconstructed_fft_values = np.fft.fft(self.reconstructedSignalData)\r\n        reconstructed_fft_frequencies = np.fft.fftfreq(reconstructed_length, d=time_step)\r\n        reconstructed_positive_frequencies = reconstructed_fft_frequencies[:reconstructed_length // 2]\r\n        reconstructed_magnitudes = np.abs(reconstructed_fft_values[:reconstructed_length // 2])\r\n\r\n        self.frequencyDomain.clear()\r\n        self.frequencyDomain.plot(reconstructed_positive_frequencies, reconstructed_magnitudes,\r\n                                  pen=mkPen(color=\"#a000c8\", width=2), name=\"Original Signal Frequency Domain\")\r\n        self.frequencyDomain.plot(-1 * reconstructed_positive_frequencies, reconstructed_magnitudes,\r\n                                  pen=mkPen(color=\"#a000c8\", width=2))\r\n\r\n        self.frequencyDomain.plot( reconstructed_positive_frequencies + self.sampling_rate, reconstructed_magnitudes,\r\n                                  pen=mkPen(color=(0, 0, 255, 150), width=2), name=\" Signals due to periodicity\")\r\n        self.frequencyDomain.plot( -reconstructed_positive_frequencies + self.sampling_rate, reconstructed_magnitudes,\r\n                                  pen=mkPen(color=(0, 0, 255, 150), width=2), )\r\n\r\n        self.frequencyDomain.plot( reconstructed_positive_frequencies - self.sampling_rate, reconstructed_magnitudes,\r\n                                  pen=mkPen(color=(0, 0, 255, 150), width=2))\r\n        self.frequencyDomain.plot( -reconstructed_positive_frequencies - self.sampling_rate, reconstructed_magnitudes,\r\n                                  pen=mkPen(color=(0, 0, 255, 150), width=2), )\r\n\r\n        threshold = 0.1 * np.max(original_magnitudes)  # Adjust threshold as needed\r\n        significant_frequencies = original_positive_frequencies[original_magnitudes > threshold]\r\n        self.signalfMax = np.max(significant_frequencies)\r\n\r\n        print(\"from fourier\")\r\n        print(self.signalfMax)\r\n\r\n        max_frequency = np.max(original_positive_frequencies) * 0.5\r\n        max_magnitude = np.max(original_magnitudes)\r\n        self.frequencyDomain.setXRange(-max_frequency, max_frequency, padding=0)\r\n        self.frequencyDomain.setYRange(0, max_magnitude * 1.1, padding=0.05)\r\n\r\n        # max_frequency = np.max(original_positive_frequencies) + self.sampling_rate\r\n        # max_magnitude = np.max(original_magnitudes)\r\n\r\n        # self.frequencyDomain.setXRange(-max_frequency * 1.1, max_frequency * 1.1, padding=0.05)\r\n        # self.frequencyDomain.setYRange(0, max_magnitude * 1.1, padding=0.05)\r\n\r\n    # def add_mixed_signal(self, amplitude, frequency, signal_type):\r\n    #     self.old_amplitude = amplitude\r\n    #     self.old_frequency = frequency\r\n    #     self.old_type = signal_type\r\n\r\n    #     mixed_signal = mixer(self.signalData, amplitude, frequency, signal_type)\r\n\r\n    #     self.signalData = np.column_stack((self.signalData[:, 0], mixed_signal))\r\n    #     self.originalSignal.plot(self.sampledTime, self.sampledSignal, pen=None, symbol='o', symbolSize=5,\r\n    #                              symbolBrush='w')\r\n    #     self.updateSignalData(self.signalData)\r\n\r\n    #     snr_value = self.snrSlider.value()\r\n    #     noisy_signal = add_noise(mixed_signal, snr_value) if self.snr_enabled else mixed_signal\r\n\r\n    #     self.originalSignal.plot(self.signalData[:, 0], noisy_signal, pen=mkPen(color=\"r\", width=2),\r\n    #                              name=\"Noisy Mixed Signal\")\r\n    #     time_step = self.signalData[1, 0] - self.signalData[0, 0]\r\n    #     self.plot_frequency_domain(mixed_signal, time_step)\r\n\r\n    def add_mixed_signal(self, amplitude, frequency, signal_type):\r\n        # Only proceed if amplitude, frequency, or signal type has actually changed\r\n        if (amplitude, frequency, signal_type) == (self.old_amplitude, self.old_frequency, self.old_type):\r\n            return  # Skip redundant updates\r\n\r\n        # Update cached signal parameters\r\n        self.old_amplitude = amplitude\r\n        self.old_frequency = frequency\r\n        self.old_type = signal_type\r\n\r\n        # Generate the mixed signal only if parameters have changed\r\n        mixed_signal = mixer(self.signalData, amplitude, frequency, signal_type)\r\n        self.signalData = np.column_stack((self.signalData[:, 0], mixed_signal))\r\n\r\n        # Clear and plot the sampled signal\r\n        self.originalSignal.clear()\r\n        self.originalSignal.plot(self.sampledTime, self.sampledSignal, pen=None, symbol='o', symbolSize=5,\r\n                                symbolBrush='w')\r\n\r\n        # Update signal data with newly mixed signal\r\n        self.updateSignalData(self.signalData)\r\n\r\n        # Check if noise addition is necessary based on SNR and snr_enabled status\r\n        snr_value = self.snrSlider.value()\r\n        if self.snr_enabled and not hasattr(self, 'noisy_signal_applied'):\r\n            noisy_signal = add_noise(mixed_signal, snr_value)\r\n            self.noisy_signal_applied = True\r\n        elif not self.snr_enabled:\r\n            self.noisy_signal_applied = False\r\n            noisy_signal = mixed_signal\r\n        else:\r\n            noisy_signal = self.noisy_amplitude  # Reuse previous noisy signal if unchanged\r\n\r\n        # Plot noisy signal, avoiding redundant plotting\r\n        self.originalSignal.plot(self.signalData[:, 0], noisy_signal, pen=mkPen(color=\"r\", width=2),\r\n                                name=\"Noisy Mixed Signal\")\r\n\r\n        # Compute FFT for frequency domain visualization only if signal data is modified\r\n        time_step = self.signalData[1, 0] - self.signalData[0, 0]\r\n        self.plot_frequency_domain(mixed_signal, time_step)\r\n\r\n\r\n    def update_table_mixed_signal(self, row, amplitude, frequency, signal_type):\r\n        old_signal = remove_elements(self.signalData, self.old_amplitude, self.old_frequency, self.old_type)\r\n        updated_signal = mixer(np.column_stack((self.signalData[:, 0], old_signal)), amplitude, frequency, signal_type)\r\n\r\n        self.old_amplitude = amplitude\r\n        self.old_frequency = frequency\r\n        self.old_type = signal_type\r\n\r\n        self.signalData = np.column_stack((self.signalData[:, 0], updated_signal))\r\n\r\n        self.originalSignal.clear()\r\n        self.originalSignal.plot(self.signalData[:, 0], updated_signal, pen=mkPen(color=\"#a000c8\", width=2),\r\n                                 name=f\"Updated Signal Row {row}\")\r\n\r\n        self.updateSignalData(self.signalData)\r\n\r\n        snr_value = self.snrSlider.value()\r\n        noisy_signal = add_noise(updated_signal, snr_value) if self.snr_enabled else updated_signal\r\n        self.originalSignal.plot(self.signalData[:, 0], noisy_signal, pen=mkPen(color=\"#a000c8\", width=2),\r\n                                 name=\"Noisy Updated Signal\")\r\n\r\n    def remove_element(self, amplitude, frequency, signal_type, num_rows):\r\n        old_signal = remove_elements(self.signalData, amplitude, frequency, signal_type)\r\n\r\n        self.signalData = np.column_stack((self.signalData[:, 0], old_signal))\r\n\r\n        self.originalSignal.clear()\r\n\r\n        self.originalSignal.plot(self.signalData[:, 0], old_signal, pen=mkPen(color=\"#a000c8\", width=2),\r\n                                 name=\"Updated Mixed Signal After Removal\")\r\n        self.updateSignalData(self.signalData)\r\n        snr_value = self.snrSlider.value()\r\n        noisy_signal = add_noise(old_signal, snr_value) if self.snr_enabled else old_signal\r\n\r\n        self.originalSignal.plot(self.signalData[:, 0], noisy_signal, pen=mkPen(color=\"#a000c8\", width=2),\r\n                                 name=\"Noisy Updated Signal After Removal\")\r\n\r\n        time_step = self.signalData[1, 0] - self.signalData[0, 0]\r\n        self.plot_frequency_domain(old_signal, time_step)\r\n        if not num_rows:\r\n            self.originalSignal.clear()\r\n            self.reconstructedSignal.clear()\r\n            self.diffrenceGraph.clear()\r\n            self.frequencyDomain.clear()\r\n            if self.data_loader:\r\n                self.updateSignalData(self.signalData)\r\n\r\n    def clearAll(self):\r\n        self.samplingRateInput.setValue(5)\r\n        self.originalSignal.clear()\r\n        self.signalData[:, 1] *= 0\r\n        self.reconstructedSignal.clear()\r\n        self.diffrenceGraph.clear()\r\n        self.frequencyDomain.clear()\r\n        self.composer.clear_table()\r\n        self.controlBar.signalNameLabel.setText(\"No signal Loaded \")\r\n        self.data_loader = None\r\n\r\n    def resizeEvent(self, event):\r\n        print(f\"Window resized: {self.width()} x {self.height()}\")\r\n        threshold_width = 1700\r\n        if self.width() < threshold_width:\r\n            self.snrSlider.setOrientation(Qt.Vertical)\r\n            self.samplingSlider.setOrientation(Qt.Vertical)\r\n        else:\r\n            self.snrSlider.setOrientation(Qt.Horizontal)\r\n            self.samplingSlider.setOrientation(Qt.Horizontal)\r\n\r\n        self.controlBar.update()\r\n        super().resizeEvent(event)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    csv_file_path = 'signals_data/ECG_Normal.csv'\r\n    app = QApplication(sys.argv)\r\n    main_app = MainApp(csv_file_path)\r\n    main_app.show()\r\n    sys.exit(app.exec_())\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GUI/main.py b/GUI/main.py
--- a/GUI/main.py	(revision e4414ce99a20c3b88446b550ffc671dc6bfa2617)
+++ b/GUI/main.py	(date 1730975527998)
@@ -330,7 +330,8 @@
                                       name="Reconstructed Signal")
         self.diffrenceGraph.clear()
         noise_difference = calculate_difference(self.signalData[:, 1], noisy_signal_reconstructed)
-        meanError = np.mean(noise_difference)
+        print(noise_difference)
+        meanError = np.max(noise_difference)
         self.diffrenceGraph.plot(time, noise_difference, pen=mkPen(color="r", width=2),
                                  name=f"Difference graph with Error: {meanError:.4f}")
         time_step = time[1] - time[0]
@@ -405,8 +406,8 @@
                 print(self.signalData[:5, 1])
                 print(reconstructed_amplitude[:5])
                 difference = calculate_difference(self.signalData[:, 1], reconstructed_amplitude)
-                print(difference[:5])
-                meanError = np.mean(np.abs(difference))
+                print(difference)
+                meanError = np.max(np.abs(difference))
                 self.diffrenceGraph.plot(self.signalData[:, 0], difference, pen=mkPen(color="r", width=2),
                                          name=f"Difference graph with Error: {meanError:.4f}")
                 self.diffrenceGraph.setYRange(-5, 5, padding=1)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"cf936afa-7aac-4859-a24f-60ffba97b4aa\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/GUI/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/GUI/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Meram-Mahmoud&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/TalalEmara/Signal-Reconstructor.git&quot;,\r\n    &quot;accountId&quot;: &quot;8bed304c-abb0-4097-a812-4dce8c1a20cd&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2nvZIqT76889PWggeLxJcsqbufU\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.main.py.executor&quot;: &quot;Run&quot;,\r\n    &quot;Python.mainCore.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/Faculty/SBE 24-25/DSP/Signal-Viewer-Team18&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\"Python.main.py\">\r\n    <configuration name=\"main.py\" type=\"PythonConfigurationType\" factoryName=\"Python\">\r\n      <module name=\"Signal-Reconstructor\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/GUI/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"test\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Signal-Reconstructor\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/Core\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/Core/test.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.test\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-PY-242.23339.19\" />\r\n        <option value=\"bundled-python-sdk-0029f7779945-399fe30bd8c1-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.23339.19\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"cf936afa-7aac-4859-a24f-60ffba97b4aa\" name=\"Changes\" comment=\"\" />\r\n      <created>1729855432731</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1729855432731</updated>\r\n      <workItem from=\"1729889981670\" duration=\"3614000\" />\r\n      <workItem from=\"1730056188815\" duration=\"9055000\" />\r\n      <workItem from=\"1730121898571\" duration=\"1610000\" />\r\n      <workItem from=\"1730124364628\" duration=\"1485000\" />\r\n      <workItem from=\"1730196388124\" duration=\"4460000\" />\r\n      <workItem from=\"1730209799335\" duration=\"7610000\" />\r\n      <workItem from=\"1730249235529\" duration=\"5188000\" />\r\n      <workItem from=\"1730724618673\" duration=\"626000\" />\r\n      <workItem from=\"1730816394215\" duration=\"6486000\" />\r\n      <workItem from=\"1730823160383\" duration=\"274000\" />\r\n      <workItem from=\"1730928235765\" duration=\"7617000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Signal_Reconstructor$main_py.coverage\" NAME=\"main.py Coverage Results\" MODIFIED=\"1730935898558\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e4414ce99a20c3b88446b550ffc671dc6bfa2617)
+++ b/.idea/workspace.xml	(date 1731409380088)
@@ -141,6 +141,7 @@
       <workItem from="1730816394215" duration="6486000" />
       <workItem from="1730823160383" duration="274000" />
       <workItem from="1730928235765" duration="7617000" />
+      <workItem from="1731346792856" duration="34000" />
     </task>
     <servers />
   </component>
@@ -148,6 +149,6 @@
     <option name="version" value="3" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/Signal_Reconstructor$main_py.coverage" NAME="main.py Coverage Results" MODIFIED="1730935898558" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
+    <SUITE FILE_PATH="coverage/Signal_Reconstructor$main_py.coverage" NAME="main.py Coverage Results" MODIFIED="1730975528013" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
   </component>
 </project>
\ No newline at end of file
